{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","undefined","currentPosition","setCurrentPosition","topPosition","setTopPosition","backendURL","process","setAsyncPosition","a","navigator","geolocation","getCurrentPosition","position","error","console","warmUpBackend","log","fetch","headers","then","response","json","debug","catch","useEffect","fetchClosestTopPosition","coords","latitude","longitude","className","Button","variant","onClick","currentLatitude","toString","currentLongitude","topLatitude","topLongitude","window","open","size","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"uPA0FeA,MAjFf,WAAgB,IAAD,EACiCC,wBAA+BC,GADhE,mBACNC,EADM,KACWC,EADX,OAEyBH,wBAAqCC,GAF9D,mBAENG,EAFM,KAEOC,EAFP,KAGPC,EAAaC,2CAGbC,EAAgB,uCAAG,sBAAAC,EAAA,sDACvBC,UAAUC,YAAYC,oBACpB,SAAAC,GAAQ,OAAIV,EAAmBU,MAC/B,SAAAC,GAAK,OAAIC,QAAQD,MAAM,mCAAoCA,MAHtC,2CAAH,qDAOhBE,EAAa,uCAAG,sBAAAP,EAAA,sDACpBM,QAAQE,IAAI,6BACZC,MAH8B,UAASZ,EAAT,YAGG,CAACa,QAAS,CAAC,MAX5BZ,yBAYba,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIN,QAAQQ,MAAMF,MAC/BG,OAAM,SAAAV,GAAK,OAAIC,QAAQD,MAAM,kCAAmCA,MAL/C,2CAAH,qDAOnBW,qBAAU,WACRjB,IACAQ,MACC,IAEH,IAGMU,EAAuB,uCAAG,sBAAAjB,EAAA,sDAC9BM,QAAQE,IAAI,oCACZC,OALkCL,EAKDX,EAJ3B,GAAN,OAAUI,EAAV,uBAAmCO,EAASc,OAAOC,SAAnD,YAA+Df,EAASc,OAAOE,YAI3B,CAACV,QAAS,CAAC,MA1B/CZ,yBA2Bba,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAsC,OAAzBN,QAAQQ,MAAMF,GAAkBA,KAClDD,MAAK,SAAAC,GAAQ,OAAIhB,EAAe,CAC/BuB,SAAUP,EAASO,SACnBC,UAAWR,EAASQ,eAErBL,OAAM,SAAAV,GAAK,OAAIC,QAAQD,MAAM,8BAA+BA,MATjC,iCAHG,IAACD,IAGJ,OAAH,qDA+B7B,OApBAY,qBAAU,WACJvB,GAAiBwB,MACpB,CAACxB,IAmBF,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,QArBQ,WACd,IAAMC,EAAkBhC,EAAiByB,OAAOC,SAASO,WACnDC,EAAmBlC,EAAiByB,OAAOE,UAAUM,WACrDE,EAAcjC,EAAawB,SAASO,WACpCG,EAAelC,EAAayB,UAAUM,WAC5CI,OAAOC,KAAK,yCAAkCN,EAAlC,YAAqDE,GAArD,WACNC,EADM,YACSC,EADT,gCAiBNG,KAAK,KACLC,gBAVqBzC,IAApBC,QAAiDD,IAAhBG,IAMpC,uBAOA,6BACA,kBAAC2B,EAAA,EAAD,CACEC,QAAQ,oBACRC,QArBU,WAChBM,OAAOC,KAAK,yEAqBNC,KAAK,MAHP,kBCnEYE,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBzC,WACrBA,UAAU0C,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAV,GACLC,QAAQD,MAAMA,EAAM0C,a","file":"static/js/main.082b025b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport './App.css'\n\ninterface simplePosition {\n  latitude: number\n  longitude: number\n}\n\nfunction App() {\n  const [currentPosition, setCurrentPosition] = useState<Position | undefined>(undefined)\n  const [topPosition, setTopPosition] = useState<simplePosition | undefined>(undefined)\n  const backendURL = process.env.REACT_APP_BACKEND_URL!\n  const authToken = process.env.REACT_APP_AUTH_TOKEN!\n\n  const setAsyncPosition = async () => {\n    navigator.geolocation.getCurrentPosition(\n      position => setCurrentPosition(position),\n      error => console.error('Failed to get current position: ', error)\n    )\n  }\n  const buildHealthzBackendPath = () => `${backendURL}/healthz`\n  const warmUpBackend = async () => {\n    console.log('Warming the backend up...')\n    fetch(buildHealthzBackendPath(), {headers: {'token': authToken}})\n      .then(response => response.json())\n      .then(response => console.debug(response))\n      .catch(error => console.error('Failed to warm up the backend: ', error))\n  }\n  useEffect(() => {\n    setAsyncPosition()\n    warmUpBackend()\n  }, [])\n\n  const buildClosestTopBackendPath = (position: Position) => {\n    return `${backendURL}/closestTop/${position.coords.latitude}/${position.coords.longitude}`\n  }\n  const fetchClosestTopPosition = async () => {\n    console.log('Fetching closest top position...')\n    fetch(buildClosestTopBackendPath(currentPosition!), {headers: {'token': authToken}})\n      .then(response => response.json())\n      .then(response => {console.debug(response); return response})\n      .then(response => setTopPosition({\n        latitude: response.latitude,\n        longitude: response.longitude\n      }))\n      .catch(error => console.error('Failed to get closest top: ', error))\n  }\n  useEffect(() => {\n    if (currentPosition) fetchClosestTopPosition()\n  }, [currentPosition])\n\n  const openMap = () => {\n    const currentLatitude = currentPosition!.coords.latitude.toString()\n    const currentLongitude = currentPosition!.coords.longitude.toString()\n    const topLatitude = topPosition!.latitude.toString()\n    const topLongitude = topPosition!.longitude.toString()\n    window.open(`https://www.google.be/maps/dir/${currentLatitude},${currentLongitude}`+\n      `/${topLatitude},${topLongitude}/data=!3m1!4b1!4m2!4m1!3e2`)\n  }\n  const openAbout = () => {\n    window.open('https://github.com/franpog859/top-of-the-world/blob/master/README.md')\n  }\n\n  const shouldMapButtonBeEnabled = (): boolean => {\n    return currentPosition !== undefined && topPosition !== undefined\n  }\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Button\n          variant='success'\n          onClick={openMap}\n          size='lg'\n          disabled={!shouldMapButtonBeEnabled()}>\n            Take me to the top!\n        </Button>\n        <br></br>\n        <Button\n          variant='outline-secondary'\n          onClick={openAbout}\n          size='lg'>\n            Wait, what?\n        </Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}