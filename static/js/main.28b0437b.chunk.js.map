{"version":3,"sources":["Lead/Lead.tsx","Buttons/Buttons.tsx","Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Lead","didFetchingFail","isLocationAvailable","isEncourageMessage","textNormal","textEncourage","icon","emojiHappy","className","textNoLocation","bxsLockAlt","textFailedToFetch","emojiSad","text","data-testid","key","shortid","generate","Buttons","clickMapButton","clickAboutButton","isMapButtonClicked","buttonStyle","background","color","borderRadius","textDecoration","fontSize","margin","Button","onClick","style","variant","size","disabled","Footer","href","target","rel","githubFilled","linkedinFilled","App","useState","undefined","currentPosition","setCurrentPosition","topPosition","setTopPosition","setIsMapButtonClicked","setIsEncourageMessage","setDidFetchingFail","backendURL","process","setAsyncPosition","a","navigator","geolocation","getCurrentPosition","position","error","console","warmUpBackend","log","fetch","headers","token","then","response","json","debug","catch","useEffect","fetchClosestTopPosition","coords","latitude","longitude","currentLatitude","toString","currentLongitude","topLatitude","topLongitude","window","open","openMap","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.28b0437b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Lead.css\";\nimport shortid from \"shortid\";\nimport { Icon } from \"@iconify/react\";\nimport bxsLockAlt from \"@iconify/icons-bx/bxs-lock-alt\";\nimport emojiSad from \"@iconify/icons-heroicons-solid/emoji-sad\";\nimport emojiHappy from \"@iconify/icons-heroicons-solid/emoji-happy\";\n\ninterface LeadProps {\n  didFetchingFail: boolean;\n  isLocationAvailable: boolean;\n  isEncourageMessage: boolean;\n}\n\nfunction Lead({\n  didFetchingFail,\n  isLocationAvailable,\n  isEncourageMessage\n}: LeadProps) {\n  const textNormal = (\n    <>\n      <p>\n        Want to go to THE TOP OF THE WORLD but you're too lazy to even think\n        about the Himalayas?\n      </p>\n      <p>Well, I've got something for you!</p>\n    </>\n  );\n\n  const textEncourage = (\n    <>\n      <p>\n        Want to go to THE TOP OF THE WORLD but you're too lazy to even think\n        about the Himalayas?\n      </p>\n      <p>Well, I've got something for you!</p>\n      <p>\n        Just click the button <Icon icon={emojiHappy} className=\"Lead-icon\" />\n      </p>\n    </>\n  );\n\n  const textNoLocation = (\n    <>\n      <p>Allow the location!</p>\n      <p>\n        Click on the <Icon icon={bxsLockAlt} className=\"Lead-icon\" /> near the\n        website address!\n      </p>\n    </>\n  );\n\n  const textFailedToFetch = (\n    <>\n      <p>\n        Something went wrong <Icon icon={emojiSad} className=\"Lead-icon\" />\n      </p>\n      <p>Try to refresh the app!</p>\n    </>\n  );\n\n  const text = !isLocationAvailable\n    ? textNoLocation\n    : didFetchingFail\n    ? textFailedToFetch\n    : isEncourageMessage\n    ? textEncourage\n    : textNormal;\n\n  // See https://stackoverflow.com/questions/57615274/my-animation-is-not-working-when-re-rending-my-react-component\n  const getRandomKey = () => shortid.generate();\n\n  return (\n    <div className=\"Lead\" data-testid=\"Lead\">\n      <div className=\"Lead-div Lead-animation\" key={getRandomKey()}>\n        {text}\n      </div>\n    </div>\n  );\n}\n\nexport default Lead;\n","import React from \"react\";\nimport \"./Buttons.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Ripples from \"react-ripples\";\n\ninterface ButtonsProps {\n  clickMapButton: () => void;\n  clickAboutButton: () => void;\n  isMapButtonClicked: boolean;\n}\n\nfunction Buttons({\n  clickMapButton,\n  clickAboutButton,\n  isMapButtonClicked\n}: ButtonsProps) {\n  const buttonStyle = {\n    background: \"#c7b198\",\n    color: \"#f0ece3\",\n    borderRadius: \"25px\",\n    textDecoration: \"none\",\n    fontSize: \"calc(10px + 2vmin)\",\n    margin: \"5px\"\n  };\n\n  return (\n    <div className=\"Buttons\" data-testid=\"Buttons\">\n      <header className=\"Buttons-header\">\n        <Ripples className=\"Buttons-ripple\">\n          <Button\n            onClick={clickMapButton}\n            style={buttonStyle}\n            variant=\"link\"\n            size=\"lg\"\n            disabled={isMapButtonClicked}\n          >\n            {!isMapButtonClicked ? (\n              <>Take me to the TOP!</>\n            ) : (\n              <>Wait for it...</>\n            )}\n          </Button>{\" \"}\n        </Ripples>\n        <Ripples className=\"Buttons-ripple\">\n          <Button\n            onClick={clickAboutButton}\n            style={buttonStyle}\n            variant=\"link\"\n            size=\"lg\"\n          >\n            Wait, what?\n          </Button>\n        </Ripples>\n      </header>\n    </div>\n  );\n}\n\nexport default Buttons;\n","import React from \"react\";\nimport \"./Footer.css\";\nimport { Icon } from \"@iconify/react\";\nimport linkedinFilled from \"@iconify/icons-ant-design/linkedin-filled\";\nimport githubFilled from \"@iconify/icons-ant-design/github-filled\";\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\" data-testid=\"Footer\">\n      <header className=\"Footer-header\">\n        <p>\n          <a\n            href=\"https://github.com/franpog859\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon icon={githubFilled} className=\"Footer-icon\" />\n          </a>\n          <a\n            href=\"https://www.linkedin.com/in/franciszekpogodzinski/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon icon={linkedinFilled} className=\"Footer-icon\" />\n          </a>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Lead from \"./Lead/Lead\";\nimport Buttons from \"./Buttons/Buttons\";\nimport Footer from \"./Footer/Footer\";\n\ninterface simplePosition {\n  latitude: number;\n  longitude: number;\n}\n\nfunction App() {\n  const [currentPosition, setCurrentPosition] = useState<Position | undefined>(\n    undefined\n  );\n  const [topPosition, setTopPosition] = useState<simplePosition | undefined>(\n    undefined\n  );\n  const [isMapButtonClicked, setIsMapButtonClicked] = useState<boolean>(false);\n  const [isEncourageMessage, setIsEncourageMessage] = useState<boolean>(false);\n  const [didFetchingFail, setDidFetchingFail] = useState<boolean>(false);\n  const backendURL = process.env.REACT_APP_BACKEND_URL!;\n  const authToken = process.env.REACT_APP_AUTH_TOKEN!;\n\n  const setAsyncPosition = async () => {\n    navigator.geolocation.getCurrentPosition(\n      position => setCurrentPosition(position),\n      error => console.error(\"Failed to get current position: \", error)\n    );\n  };\n  const buildHealthzBackendPath = () => `${backendURL}/healthz`;\n  const warmUpBackend = async () => {\n    console.log(\"Warming the backend up...\");\n    fetch(buildHealthzBackendPath(), { headers: { token: authToken } })\n      .then(response => response.json())\n      .then(response => console.debug(response))\n      .catch(error => console.error(\"Failed to warm up the backend: \", error));\n  };\n  useEffect(() => {\n    setAsyncPosition();\n    warmUpBackend();\n  }, []);\n\n  const buildClosestTopBackendPath = (position: Position) => {\n    return `${backendURL}/closestTop/${position.coords.latitude}/${position.coords.longitude}`;\n  };\n  const fetchClosestTopPosition = async () => {\n    console.log(\"Fetching closest top position...\");\n    fetch(buildClosestTopBackendPath(currentPosition!), {\n      headers: { token: authToken }\n    })\n      .then(response => response.json())\n      .then(response => {\n        console.debug(response);\n        return response;\n      })\n      .then(response => {\n        setTopPosition({\n          latitude: response.latitude,\n          longitude: response.longitude\n        });\n        if (isMapButtonClicked === false) {\n          setIsEncourageMessage(true);\n        }\n      })\n      .catch(error => {\n        console.error(\"Failed to get closest top: \", error);\n        setDidFetchingFail(true);\n        setIsMapButtonClicked(false);\n      });\n  };\n  useEffect(() => {\n    if (currentPosition) fetchClosestTopPosition();\n  }, [currentPosition]);\n\n  const openMap = () => {\n    const currentLatitude = currentPosition!.coords.latitude.toString();\n    const currentLongitude = currentPosition!.coords.longitude.toString();\n    const topLatitude = topPosition!.latitude.toString();\n    const topLongitude = topPosition!.longitude.toString();\n    window.open(\n      `https://www.google.be/maps/dir/${currentLatitude},${currentLongitude}` +\n        `/${topLatitude},${topLongitude}/data=!3m1!4b1!4m2!4m1!3e2`\n    );\n  };\n  useEffect(() => {\n    if (\n      currentPosition !== undefined &&\n      topPosition !== undefined &&\n      isMapButtonClicked === true\n    ) {\n      openMap();\n      setIsMapButtonClicked(false);\n      setIsEncourageMessage(false);\n    }\n  }, [currentPosition, topPosition, isMapButtonClicked]);\n\n  const clickMapButton = () => {\n    setIsMapButtonClicked(true);\n  };\n  const openAbout = () => {\n    window.open(\n      \"https://github.com/franpog859/top-of-the-world/blob/master/README.md\"\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header App-animation\">\n        <Lead\n          didFetchingFail={didFetchingFail}\n          isLocationAvailable={currentPosition !== undefined}\n          isEncourageMessage={isEncourageMessage}\n        />\n        <Buttons\n          clickMapButton={clickMapButton}\n          clickAboutButton={openAbout}\n          isMapButtonClicked={isMapButtonClicked}\n        />\n        <Footer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}